<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://tomeaton.uk/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://tomeaton.uk/blog/" rel="alternate" type="text/html" /><updated>2017-10-25T18:46:17+02:00</updated><id>http://tomeaton.uk/blog/</id><title type="html">Tom Eaton’s Weblog.</title><subtitle>Tom Eaton's Weblog. Random technical articles on things that I find interesting.</subtitle><entry><title type="html">Managing dotfiles with GNU stow</title><link href="http://tomeaton.uk/blog/jekyll/update/2017/10/25/Managing-dotfiles-with-GNU-stow.html" rel="alternate" type="text/html" title="Managing dotfiles with GNU stow" /><published>2017-10-25T17:00:00+02:00</published><updated>2017-10-25T17:00:00+02:00</updated><id>http://tomeaton.uk/blog/jekyll/update/2017/10/25/Managing-dotfiles-with-GNU-stow</id><content type="html" xml:base="http://tomeaton.uk/blog/jekyll/update/2017/10/25/Managing-dotfiles-with-GNU-stow.html">&lt;h2 id=&quot;i3wm&quot;&gt;i3wm&lt;/h2&gt;
&lt;p&gt;I recently switched to the i3 window manager, which is a tiling window manager for Linux. &lt;img src=&quot;http://tomeaton.uk/blog/assets/i3demo.png&quot; alt=&quot;i3 demo&quot; /&gt; Is an example of how it automatically tiles the windows. For a great demonstration of how beautiful you can get i3 to look visit the Reddit community &lt;a href=&quot;https://reddit.com/r/unixporn&quot;&gt;https://reddit.com/r/unixporn&lt;/a&gt;. &lt;em&gt;Don’t worry, its safe for work!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;dotfiles&quot;&gt;Dotfiles&lt;/h2&gt;
&lt;p&gt;When working with i3, and the other programs which store their configuration in dotfiles, it is a good idea to backup your dotfiles so in the case of an emergency you haven’t lost your configuration (trust me, you get very attached to it!). It is also helpful when you want to reinstall your configuration on another machine, so you don’t have to manually copy over every file.&lt;/p&gt;

&lt;p&gt;If you want a configuration similar to mine, my dotfiles can be found &lt;a href=&quot;https://github.com/tomeaton17/dotfiles&quot;&gt;on my Github page.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;gnu-stow&quot;&gt;GNU stow&lt;/h2&gt;
&lt;p&gt;According to the project page GNU stow is&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GNU Stow is a symlink farm manager which takes distinct packages of software and/or data located in separate directories on the filesystem, and makes them appear to be installed in the same place.
This may sound complicated, but essentially it allows you to collect files in one folder and install them to their required location with a single command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Install GNU stow
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install stow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a directory to store all your dotfiles in
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir dotfiles
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;dotfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;I would recommend backing this folder up with a version control system, e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; and storing on github.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a folder named the program whose configuration files you want to install. For this example I will install vim’s config file
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir vim
cd vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The directory now looks like this&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotfiles
└── vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Move the configuration file into the directory you just made
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv ~/.vimrc &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Directory now looks like this&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotfiles
└── vim
    └── .vimrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the configuration file back to its correct location. Must be done from root directory, dotfiles in this case.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stow vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;All the files inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; folder will now be moved to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more complex configuration files which aren’t just inside &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; you must add the folders inside the directory. For example with the i3 config is stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/i3/config&lt;/code&gt;. When making a new directory inside &lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt; imagine it is the home directory. So to create a folder to install the i3 config the directory structure would now look like this&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotfiles
└── vim
       └── .vimrc
    i3
       └── .config
           └── i3
              ├── config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I hope you now know how to use GNU stow to manage your dotfiles!&lt;/p&gt;</content><author><name></name></author><summary type="html">i3wm I recently switched to the i3 window manager, which is a tiling window manager for Linux. Is an example of how it automatically tiles the windows. For a great demonstration of how beautiful you can get i3 to look visit the Reddit community https://reddit.com/r/unixporn. Don’t worry, its safe for work!</summary></entry><entry><title type="html">Environment variables with Python</title><link href="http://tomeaton.uk/blog/jekyll/update/2017/10/20/Environment-variables-with-Python.html" rel="alternate" type="text/html" title="Environment variables with Python" /><published>2017-10-20T11:56:35+02:00</published><updated>2017-10-20T11:56:35+02:00</updated><id>http://tomeaton.uk/blog/jekyll/update/2017/10/20/Environment-variables-with-Python</id><content type="html" xml:base="http://tomeaton.uk/blog/jekyll/update/2017/10/20/Environment-variables-with-Python.html">&lt;p&gt;When working with APIs, an ‘API token’ or ‘key’ is often required to use the API. If you are working with these files locally this is not an issue, as long as your machine is secure. However, if you are using a version control system like &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; (which you should be doing) and you push to a public repository, its no longer a good idea to store API keys in your source code files as they can be seen by anybody.&lt;/p&gt;

&lt;p&gt;I came across this issue when working on &lt;a href=&quot;https://github.com/tomeaton17/urban-enigma&quot;&gt;urban-enigma&lt;/a&gt;, which is machine learning project which trys to predict the location where a picture was taken. It is trained on Instagram pictures that are geotagged. I realised that I did not want to store my secret API keys on a public repository, so enivronment variables came to the rescue.&lt;/p&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;An environment variable is a dynamic-named value that can affect the way running processes will behave on a computer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can think of it as a variable that can be accessed by any program that is in that environment. So how do you set these environment variables?&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;Using environment variables in Windows is easy on the command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-batch&quot; data-lang=&quot;batch&quot;&gt;&amp;gt; setx FOO=BAR
&amp;gt; echo %FOO%
BAR&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So to set the variables use &lt;code class=&quot;highlighter-rouge&quot;&gt;setx&lt;/code&gt; and if you want to recall the variable, remember to wrap it in percentage signs, like &lt;code class=&quot;highlighter-rouge&quot;&gt;%EXAMPLEVARIABLE%&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;linux-and-os-x&quot;&gt;Linux and OS X&lt;/h2&gt;
&lt;p&gt;Setting environment variables in Linux and OS X is also done on the command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FOO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BAR
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FOO&lt;/span&gt;
BAR&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setting variables is done with &lt;code class=&quot;highlighter-rouge&quot;&gt;export VARNAME=VAR_VALUE&lt;/code&gt; and they can be recalled on the prompt with just &lt;code class=&quot;highlighter-rouge&quot;&gt;$VARNMAME&lt;/code&gt;, no need for the percentages when using bash.&lt;/p&gt;

&lt;h2 id=&quot;using-environment-variables-in-python&quot;&gt;Using environment variables in Python&lt;/h2&gt;
&lt;p&gt;Interfacing with enviroment variables is done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;os&lt;/code&gt; library. Using the variables that we set above, the syntax is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FOO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BAR&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now see how to use this for storing API keys and the like.&lt;/p&gt;

&lt;h2 id=&quot;setting-environment-variables-with-a-bash-script&quot;&gt;Setting environment variables with a bash script&lt;/h2&gt;
&lt;p&gt;Environment variables are only persistent for that shell session, so when you close the terminal window they are lost. It can get tedious setting this variables everytime you make a new terminal, so you can make a script to do this. An example script is below&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FOO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BAR
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FIZZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BUZZ&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then save the script, I will save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;.setenv.sh&lt;/code&gt;. I added the dot before just to make it a bit harder to find. First make the script executable with &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x .setenv.sh&lt;/code&gt; and then run the script with &lt;code class=&quot;highlighter-rouge&quot;&gt;. .setenv.sh&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;. scriptname&lt;/code&gt; may seem like intersting syntax but you must do this to make the script run in the current shell so the variables are saved. If you run the script with &lt;code class=&quot;highlighter-rouge&quot;&gt;./scriptname&lt;/code&gt; it will run the script in a new shell so the variables won’t be saved. Alternative syntax for this is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;source scriptname&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;. scriptname&lt;/code&gt; is actually an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;source scriptname&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember to not add this script to your repository, or there is no point in using environment variables!&lt;/p&gt;

&lt;p&gt;So I hope after reading this you now know how and when to use environment variables with Python.&lt;/p&gt;</content><author><name></name></author><summary type="html">When working with APIs, an ‘API token’ or ‘key’ is often required to use the API. If you are working with these files locally this is not an issue, as long as your machine is secure. However, if you are using a version control system like git (which you should be doing) and you push to a public repository, its no longer a good idea to store API keys in your source code files as they can be seen by anybody.</summary></entry></feed>